# Copyright (c) 2010, Cormac Flanagan (University of California, Santa Cruz)
#                     and Stephen Freund (Williams College) 
#
# All rights reserved.  
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#    * Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#    * Neither the names of the University of California, Santa Cruz
#      and Williams College nor the names of its contributors may be
#      used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Must be a 1.7 or later VM

### MacOS
# export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home

### Ubuntu
# export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/

# These two lines are for OS X, to set the max memory to just under
# the total machine memory
# GIGS=`system_profiler SPHardwareDataType | grep Memory | cut -f2 -d: | cut -f1 -dG | sed -e "s/ //g" `

### JVM arguments
# Check this out for -Xmx1024m: https://stackoverflow.com/questions/5374455/what-does-java-option-xmx-stand-for

### Profiling
# use this if you don't need to do profiling
# export JVM_ARGS="-Xmx1024m -Xms1g"

# in case you use jProfiler, `id` is the session ID
profiler="-agentpath:/Applications/JProfiler.app/Contents/Resources/app/bin/macos/libjprofilerti.jnilib=offline,id=105,config=/Users/hung/.jprofiler13/jprofiler_config.xml"
export JVM_ARGS="-Xmx4096m -Xms1g $profiler"

export PATH=${PATH}:`pwd`/auto/bin:`pwd`/bin

export RR_MODE=SLOW
export RR_HOME=`pwd`
export RR_TOOLPATH=`pwd`/classes/rr/simple:`pwd`/classes/tools

echo "RR Setup"
echo "================================================"
echo
echo "JAVA_HOME   =  " $JAVA_HOME
echo "JVM_ARGS    =  " $JVM_ARGS
echo "rrrun       -> " `which rrrun`
echo "RR_HOME     =  " $RR_HOME
echo "RR_TOOLPATH =  " $RR_TOOLPATH
echo
echo "================================================"


echo "Available Processors"
echo "================================================"
echo ""
javac test/Proc.java
export AVAIL_PROCS=`java test/Proc`
echo "Runtime.getRuntime().availableProcessors() returned ${AVAIL_PROCS}"
echo ""
echo "================================================"

export PATH=${PATH}:`pwd`/artifact/bin

echo " "
echo "================================================"
echo "Artifact Tools on Path: "
echo "================================================"
ls artifact/bin
echo "================================================"
echo " "
